Original analysis
	File REL Analysis
	Number of nibble clusters: 713
	Total nibbles in clusters: 7748
	File size (bytes): 8174
	REL encode file size: 1852

Updated analysis
	File REL Analysis
	Number of nibble clusters: 705
	Total nibbles in clusters: 7639
	File size (bytes): 8174
	REL encode file size: 1945



code to crunch to 4 bits
                    //if ((i % 4) == 2) // save after two bytes read/combined
                    //{
                    //    int highNibble = (int)nextByte & 0xF0;
                    //    lowNibble = lowNibble | highNibble;
                    //    fileWriter.Write((byte)lowNibble);
                    //}
                    //else if ((i % 2) == 0) // read only every other byte 0,2,4, etc.
                    //{
                    //    lowNibble = nextByte >> 4;
                    //}

 private List<int> findNibblesInRow(string inputFile)
        {
            string outputFile = "";

            List<int> value = new List<int>();
            int lastNibble = -1; int lowNibble = 0; int highNibble = 0; int count = 1;
            bool bypass = false; byte nextByte;

            if (inputFileName != "")
            {
                outputFile = Path.Combine(Path.GetDirectoryName(inputFileName),
                             Path.GetFileNameWithoutExtension(inputFileName) + "_REL" +
                             Path.GetExtension(inputFileName));

                FileStream inputfs = new FileStream(inputFileName, FileMode.Open, FileAccess.Read);
                BinaryReader fileReader = new BinaryReader(inputfs);

                FileStream outputfs = new FileStream(outputFile, FileMode.CreateNew);
                BinaryWriter fileWriter = new BinaryWriter(outputfs);

                long fileSize = inputfs.Length;
                for (long i = 0; i < fileSize; i++)
                {
                      nextByte = fileReader.ReadByte();
                     lowNibble = (int)nextByte & 0x0F; // low nibble
                    highNibble = (int)nextByte >> 4;   // high nibble
                    bypass = false;

                    // first check the low nibble value, if it is the same as the last
                    // inc the count if count < 15, otherwise we need to write it out
                    // to the file.
                    if ((lowNibble == lastNibble) & (count < 15))
                    {
                        count++;
                        // neeed to write out REL pair here and skip to high nibble testing
                        if (count == 15)
                        {
                            value.Add(count);

                            // write out REL byte pair
                            int temp = (count << 4) | lastNibble;
                            fileWriter.Write((byte)0x00); // REL flag
                            fileWriter.Write((byte)temp);

                            lastNibble = -1;
                            count = 1;
                        }
                    }
                    else
                    {
                        // if enough nibbles to REL encode write out REL of 'last' value
                        // else, write out count# nibbles of 'last' value, if an odd# of
                        // nibbles steal the 'current' nibble and bypass high nibble check below
                        if (count > 5)
                        {
                            value.Add(count);

                            // write out REL byte pair
                            int temp = (count << 4) | lastNibble;
                            fileWriter.Write((byte)0x00); // REL flag
                            fileWriter.Write((byte)temp);

                            lastNibble = highNibble;
                            highNibble = -1; // skip highNibble test below have the high nibble left over
                            count = 1;
                        }
                        else
                        {
                            if (count != 1)
                            {
                                // make byte of two last nibbles, write out count / 2 bytes
                                int temp = (lastNibble << 4) | lastNibble;
                                for (int j = 0; j < count / 2; j++)
                                {
                                    fileWriter.Write((byte)temp);
                                }

                                // if we have an odd number of nibbles make of byte of 
                                // last | current, write it out
                                if (count % 2 != 0)
                                {
                                    // write out (last << 4) & current
                                    // set skip flag for below
                                    temp = (lastNibble << 4) | lowNibble;
                                    fileWriter.Write((byte)temp);

                                    lastNibble = highNibble;
                                    highNibble = -1; //bypass highNibble testing below
                                    count = 1;       // as we are out of nibbles
                                }
                                else
                                {
                                    lastNibble = lowNibble;
                                    count = 1;
                                }
                            }
                            else
                            {
                                lastNibble = lowNibble;
                                count = 1;
                            }

                        }
                    }

                    // if not bypassed from above, check the high nibble value, if
                    // same as last then inc the count if count < 15, else write to files
                    if (highNibble != -1)
                    {
                        if ((highNibble == lastNibble) & (count < 15))
                        {
                            count++;
                            if (count == 15)
                            {
                                value.Add(count);

                                // write out REL byte pair
                                int temp = (count << 4) | lastNibble;
                                fileWriter.Write((byte)0x00); // REL flag
                                fileWriter.Write((byte)temp);

                                lastNibble = -1;
                                count = 1;
                            }
                        }
                        else
                        {
                            // if enough nibbles to REL encode write out REL of 'last' value
                            // else, write out count# nibbles of 'last' value, if an odd# of
                            // nibbles steal the 'next' nibble.
                            if (count > 5)
                            {
                                value.Add(count);

                                // write out REL byte pair
                                int temp = (count << 4) | lastNibble;
                                fileWriter.Write((byte)0x00); // REL flag
                                fileWriter.Write((byte)temp);

                                lastNibble = -1;
                                count = 1;
                            }
                            else
                            {
                                if (count != 1)
                                {
                                    // make byte of two last nibbles, write out count / 2 bytes
                                    int temp = (lastNibble << 4) | lastNibble;
                                    for (int j = 0; j < count / 2; j++)
                                    {
                                        fileWriter.Write((byte)temp);
                                    }

                                    // if we have an odd number of nibbles make of byte of 
                                    // last | next, write it out
                                    if (count % 2 != 0)
                                    {
                                        temp = (lastNibble << 4) | highNibble;
                                        fileWriter.Write((byte)temp);
                                        lastNibble = 0;
                                        count = 1;
                                    }
                                    else
                                    {
                                        lastNibble = highNibble;
                                        count = 1;
                                    }
                                }
                                else
                                {
                                    // we get here when nextByte does not match last or itself
                                    // so it gets written right back out
                                    fileWriter.Write(nextByte);
                                    lastNibble = -1;
                                    count = 1;
                                }
                            }

                        }
                    }

                }

                fileReader.Close();
                inputfs.Close();

                fileWriter.Close();
                outputfs.Close();
            }

            return value;
        }
